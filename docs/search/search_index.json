{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Telegram Updater Documentations Telegram Updater is a .NET package written in C# that helps you receive updates from Telegram Bot Api. Updater is made to bring simplicity when working with telegram bots in .NET. Updaters uses Telegram.Bot as dependency to work with api. This a framework written on top of Telegram.Bot. TelegramUpdater requires you to use .NET Core 3.1 and above! TelegramUpdater is highly adjustable for any type of common SDKs in .NET Normal apps with no hosting Worker Service ASP .NET app ... Example of WorkerService using WorkerService; IHost host = Host.CreateDefaultBuilder(args) .ConfigureServices(services => { services.AddTelegramUpdater( \"BOT_TOKEN\", default, (builder) => builder .AddMessageHandler<SimpleMessageHandler>() ); }) .Build(); await host.RunAsync(); That's minimum the requirements, but there're a lot of customizations.","title":"Home"},{"location":"#telegram-updater-documentations","text":"Telegram Updater is a .NET package written in C# that helps you receive updates from Telegram Bot Api. Updater is made to bring simplicity when working with telegram bots in .NET. Updaters uses Telegram.Bot as dependency to work with api. This a framework written on top of Telegram.Bot. TelegramUpdater requires you to use .NET Core 3.1 and above! TelegramUpdater is highly adjustable for any type of common SDKs in .NET Normal apps with no hosting Worker Service ASP .NET app ...","title":"Telegram Updater Documentations"},{"location":"#example-of-workerservice","text":"using WorkerService; IHost host = Host.CreateDefaultBuilder(args) .ConfigureServices(services => { services.AddTelegramUpdater( \"BOT_TOKEN\", default, (builder) => builder .AddMessageHandler<SimpleMessageHandler>() ); }) .Build(); await host.RunAsync(); That's minimum the requirements, but there're a lot of customizations.","title":"Example of WorkerService"},{"location":"DifferentSdks/Console/","text":"","title":"Console app"},{"location":"FeaturesExplained/UpdaterClass/","text":"Updater class In telegram updater package, Updater class has a essential role and almost everything done within it. What's the duty By default, updater gets an instance of ITelegramBotClient and usew it to make api requests like getUpdates and ... Updater gets updates from telegram bot api, process and orders them and sends them to the handlers you specified. Constructor ITelegramBotClient : This is the instance of your bot client. UpdaterOptions : A set of options to customize the updater behavior. Available options int? MaxDegreeOfParallelism : Maximum number of allowed concurent update handling tasks. If the bot becomes to busy, the updater would try to limit the rate! so it doesn't let updates count that are being handled at same time gose more than this value. bool PerUserOneByOneProcess : This option indicates if user can have multiple updates that are being handled at the same time. By enabling this, user has to wait a request of him to finish then starts a new one. ILogger<Updater>? Logger : a logger! updater will create a default if you leave this empty. bool FlushUpdatesQueue : If the updater is reponseable for getting updates, it will tell that old pending updates should be ignored and updater should receive updates from now. UpdateType[] AllowedUpdates : An array of UpdateType to specify the allowed updates. Again If the updater is reponseable for getting updates! And a CancellationToken to cancel the jobs. IServiceProvider This argument is not required! but if you have a service collection available, Updater behavior improves when handling IScopedUpdateHandler s, for instance, DI will be available inside them and they will be a real scoped operations. Available methods Here we have a list of available methods directly from updater. Adding Update Handler There are two major methods for this. AddUpdateHandler(ISingletonUpdateHandler updateHandler) Use this to add a singleton update handler to the updater Singleton handlers are creating ones and by yourself. AddScopedHandler(IScopedHandlerContainer scopedHandlerContainer) Use this to add an scoped handler container to the updater. Every container contains an IScopedUpdateHandler and a Filter . Scoped handlers are created per each request any automatically by updater. If you passed an IServiceCollection to the updater costructor, then updater will use it to create scopes and new instances. and DI will be available! If there's a IServiceCollection , normal handlers won't work! Note You don't have to use this methods directly, but there are many extension methods available to make it easier. Adding Exception Handler AddExceptionHandler(IExceptionHandler exceptionHandler) Exception handler let you define a job for each type of exception that occurs inside a handler. Opening channels OpenChannel<T>(AbstractChannel<T> updateChannel, TimeSpan timeOut) This method allows you to wait for a specified update to come inside a handler, for instance you can send a button to the user and wait for him in place! AbstractChannel<T> updateChannel : This class helps updater find the right update using filters. TimeSpan timeOut : Maximum allowed waiting time. var msg = await container.Response($\"Are you ok? answer quick!\", replyMarkup: new InlineKeyboardMarkup( InlineKeyboardButton.WithCallbackData(\"Yes i'm OK!\", \"ok\"))); await container.ChannelUserClick(TimeSpan.FromSeconds(5), \"ok\") .IfNotNull(async answer => { await answer.Edit(text: \"Well ...\"); }) .Else(async _ => { await msg.Edit(\"Slow\"); }); ChannelUserClick is an extension method for OpenChannel . Start! using Start method you tell the updater to start the job! Here you can specify if this method should block or not, or the updater is reponseable for getting updates and ...","title":"Updater Class"},{"location":"FeaturesExplained/UpdaterClass/#updater-class","text":"In telegram updater package, Updater class has a essential role and almost everything done within it.","title":"Updater class"},{"location":"FeaturesExplained/UpdaterClass/#whats-the-duty","text":"By default, updater gets an instance of ITelegramBotClient and usew it to make api requests like getUpdates and ... Updater gets updates from telegram bot api, process and orders them and sends them to the handlers you specified.","title":"What's the duty"},{"location":"FeaturesExplained/UpdaterClass/#constructor","text":"ITelegramBotClient : This is the instance of your bot client. UpdaterOptions : A set of options to customize the updater behavior.","title":"Constructor"},{"location":"FeaturesExplained/UpdaterClass/#available-options","text":"int? MaxDegreeOfParallelism : Maximum number of allowed concurent update handling tasks. If the bot becomes to busy, the updater would try to limit the rate! so it doesn't let updates count that are being handled at same time gose more than this value. bool PerUserOneByOneProcess : This option indicates if user can have multiple updates that are being handled at the same time. By enabling this, user has to wait a request of him to finish then starts a new one. ILogger<Updater>? Logger : a logger! updater will create a default if you leave this empty. bool FlushUpdatesQueue : If the updater is reponseable for getting updates, it will tell that old pending updates should be ignored and updater should receive updates from now. UpdateType[] AllowedUpdates : An array of UpdateType to specify the allowed updates. Again If the updater is reponseable for getting updates! And a CancellationToken to cancel the jobs. IServiceProvider This argument is not required! but if you have a service collection available, Updater behavior improves when handling IScopedUpdateHandler s, for instance, DI will be available inside them and they will be a real scoped operations.","title":"Available options"},{"location":"FeaturesExplained/UpdaterClass/#available-methods","text":"Here we have a list of available methods directly from updater.","title":"Available methods"},{"location":"FeaturesExplained/UpdaterClass/#adding-update-handler","text":"There are two major methods for this. AddUpdateHandler(ISingletonUpdateHandler updateHandler) Use this to add a singleton update handler to the updater Singleton handlers are creating ones and by yourself. AddScopedHandler(IScopedHandlerContainer scopedHandlerContainer) Use this to add an scoped handler container to the updater. Every container contains an IScopedUpdateHandler and a Filter . Scoped handlers are created per each request any automatically by updater. If you passed an IServiceCollection to the updater costructor, then updater will use it to create scopes and new instances. and DI will be available! If there's a IServiceCollection , normal handlers won't work!","title":"Adding Update Handler"},{"location":"FeaturesExplained/UpdaterClass/#note","text":"You don't have to use this methods directly, but there are many extension methods available to make it easier.","title":"Note"},{"location":"FeaturesExplained/UpdaterClass/#adding-exception-handler","text":"AddExceptionHandler(IExceptionHandler exceptionHandler) Exception handler let you define a job for each type of exception that occurs inside a handler.","title":"Adding Exception Handler"},{"location":"FeaturesExplained/UpdaterClass/#opening-channels","text":"OpenChannel<T>(AbstractChannel<T> updateChannel, TimeSpan timeOut) This method allows you to wait for a specified update to come inside a handler, for instance you can send a button to the user and wait for him in place! AbstractChannel<T> updateChannel : This class helps updater find the right update using filters. TimeSpan timeOut : Maximum allowed waiting time. var msg = await container.Response($\"Are you ok? answer quick!\", replyMarkup: new InlineKeyboardMarkup( InlineKeyboardButton.WithCallbackData(\"Yes i'm OK!\", \"ok\"))); await container.ChannelUserClick(TimeSpan.FromSeconds(5), \"ok\") .IfNotNull(async answer => { await answer.Edit(text: \"Well ...\"); }) .Else(async _ => { await msg.Edit(\"Slow\"); }); ChannelUserClick is an extension method for OpenChannel .","title":"Opening channels"},{"location":"FeaturesExplained/UpdaterClass/#start","text":"using Start method you tell the updater to start the job! Here you can specify if this method should block or not, or the updater is reponseable for getting updates and ...","title":"Start!"}]}